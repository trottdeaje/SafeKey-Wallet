{"version":3,"sources":["screens/QrScanScreen.js"],"names":["QrReader","loadable","window","Dimensions","get","screen","QrScanScreen","navigation","useState","scanned","setScanned","facing","setFacing","invalidQR","setInvalidQR","dimensions","setDimensions","toast","useToast","onChange","useEffect","addEventListener","removeEventListener","style","styles","container","backgroundColor","marginBottom","center","fontSize","lineHeight","textAlign","position","textAlignVertical","margin","zIndex","flex","minHeight","color","marginTop","fontFamily","facingMode","onLoad","console","log","DetectRTC","load","delay","onError","error","name","dispatch","CommonActions","reset","index","routes","onScan","data","a","async","keywords","keyRef","some","keyword","includes","indexStartKey","indexOf","indexEndKey","keywordBMKey","substring","keywordBMKeyFinal","slice","isNaN","year","parseInt","substr","day","month","date","Date","todayDate","getTime","show","onPress","Linking","openURL","hide","bold","text","offsetBottom","id","duration","type","normalColor","goBack","options","weekday","dateQR","toLocaleString","AsyncStorage","setItem","indexStart","indexEnd","keywordKey","handleBarCodeScanned","width","alignSelf","justifyContent","paddingHorizontal","paddingVertical","borderRadius","letterSpacing"],"mappings":"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","file":"static/js/21.64c679f4.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  Linking,\r\n} from \"react-native\";\r\n\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { CommonActions } from \"@react-navigation/native\";\r\nimport loadable from \"@loadable/component\";\r\nconst QrReader = loadable(() => import(\"react-qr-reader\"));\r\nimport DetectRTC from \"detectrtc\";\r\nimport { useToast } from \"react-native-toast-notifications\";\r\nimport { styles } from \"./styles\";\r\n\r\nconst window = Dimensions.get(\"window\");\r\nconst screen = Dimensions.get(\"screen\");\r\n\r\nconst QrScanScreen = ({ navigation }) => {\r\n  const [scanned, setScanned] = useState(false);\r\n  const [facing, setFacing] = useState(\"environment\");\r\n  const [invalidQR, setInvalidQR] = useState(false);\r\n  const [dimensions, setDimensions] = useState({ window, screen });\r\n  const toast = useToast();\r\n\r\n  const onChange = ({ window, screen }) => {\r\n    setDimensions({ window, screen });\r\n  };\r\n\r\n  const changeFacing = () => {\r\n    facing === \"environment\" ? setFacing(\"user\") : setFacing(\"environment\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    Dimensions.addEventListener(\"change\", onChange);\r\n    return () => {\r\n      Dimensions.removeEventListener(\"change\", onChange);\r\n    };\r\n  });\r\n\r\n  const handleBarCodeScanned = async (data) => {\r\n    const keywords = [\":BM.KEY:\", \":BM.VAX:\"];\r\n    const keyRef = [\":BM.KEY:\"];\r\n    if (data !== null) {\r\n      // Find keywords that match our array of items\r\n      if (keywords.some((keyword) => data.includes(keyword))) {\r\n        // Gets date from pass and checks to see if it's a number\r\n        if (keyRef.some((keyword) => data.includes(keyword))) {\r\n          let indexStartKey = data.indexOf(\":\", 130);\r\n          let indexEndKey = data.indexOf(\"/\");\r\n          let keywordBMKey = data.substring(indexStartKey, indexEndKey);\r\n          let keywordBMKeyFinal = keywordBMKey.slice(1);\r\n\r\n          if (!isNaN(keywordBMKeyFinal)) {\r\n            let year = parseInt(keywordBMKeyFinal.substr(0, 4), 10);\r\n            let day = parseInt(keywordBMKeyFinal.substr(6), 10);\r\n            let month = parseInt(keywordBMKeyFinal.substr(4, 2), 10);\r\n\r\n            let date = new Date(year, month - 1, day);\r\n            let todayDate = new Date();\r\n\r\n            if (date.getTime() < todayDate.getTime()) {\r\n              // If the date is in the past, show a toast\r\n              toast.show(\r\n                <View>\r\n                  <TouchableOpacity\r\n                    onPress={() => {\r\n                      Linking.openURL(\"https://www.gov.bm/safekey\");\r\n                      toast.hide(1);\r\n                    }}\r\n                  >\r\n                    <Text style={[styles.bold, { color: \"#fff\" }]}>\r\n                      This SafeKey has expired\r\n                    </Text>\r\n                    <Text\r\n                      style={[\r\n                        styles.text,\r\n                        { color: \"#fff\", textAlign: \"center\" },\r\n                      ]}\r\n                    >\r\n                      Click here to renew it\r\n                    </Text>\r\n                  </TouchableOpacity>\r\n                </View>,\r\n                {\r\n                  offsetBottom: 50,\r\n                  id: 1,\r\n                  position: \"bottom\",\r\n                  duration: 0,\r\n                  type: \"normal\",\r\n                  normalColor: \"#ff4d4d\",\r\n                }\r\n              );\r\n              return navigation.goBack();\r\n            }\r\n\r\n            let options = {\r\n              weekday: \"long\",\r\n              year: \"numeric\",\r\n              month: \"long\",\r\n              day: \"numeric\",\r\n            };\r\n            const dateQR = date.toLocaleString(\"en-US\", options);\r\n            await AsyncStorage.setItem(\"passExpiry\", dateQR);\r\n          } else {\r\n            console.log(\"parsed date is not a number\");\r\n          }\r\n        }\r\n        // take payload name and set as Key with the value being the parsed QR data. Every payload name is found\r\n        // between two colons in the parsed QR data\r\n        let indexStart = data.indexOf(\":\");\r\n        indexStart += 1;\r\n        let indexEnd = data.indexOf(\":\", indexStart + 1);\r\n        let keywordKey = data.substring(indexStart, indexEnd);\r\n        await AsyncStorage.setItem(keywordKey, data);\r\n        setScanned(true);\r\n        // Navigate to a different screen while passing the parsed QR data with it\r\n        navigation.dispatch(\r\n          CommonActions.reset({ index: 0, routes: [{ name: \"QR List\" }] })\r\n        );\r\n        toast.show(\r\n          keywordKey === \"BM.KEY\" ? (\r\n            <View>\r\n              <Text style={[styles.bold, { color: \"#fff\" }]}>\r\n                SafeKey Added\r\n              </Text>\r\n            </View>\r\n          ) : (\r\n            <View>\r\n              <Text style={[styles.bold, { color: \"#fff\" }]}>\r\n                Vaccination Certificate Added\r\n              </Text>\r\n            </View>\r\n          ),\r\n          {\r\n            id: 3,\r\n            type: \"success\",\r\n            duration: 3500,\r\n          }\r\n        );\r\n      } else {\r\n        setInvalidQR(true);\r\n      }\r\n    } else {\r\n      setScanned(false);\r\n      setInvalidQR(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View\r\n      style={[\r\n        styles.container,\r\n        {\r\n          backgroundColor: \"#000\",\r\n          marginBottom: 0,\r\n        },\r\n      ]}\r\n    >\r\n      <View\r\n        style={[\r\n          styles.center,\r\n          {\r\n            backgroundColor: \"#000\",\r\n            fontSize: 16,\r\n            lineHeight: 50,\r\n            textAlign: \"center\",\r\n            position: \"relative\",\r\n            textAlignVertical: \"center\",\r\n            margin: 0,\r\n            zIndex: 10,\r\n            fontSize: 16,\r\n            flex: 1,\r\n            minHeight: 80,\r\n          },\r\n        ]}\r\n      >\r\n        <Text style={{ color: \"#f1f1f1\", marginBottom: 5, marginTop: 15 }}>\r\n          Scan your SafeKey Document QR code\r\n        </Text>\r\n        <Text style={{ color: \"#f1f1f1\" }}>Keep camera steady</Text>\r\n        <Text\r\n          style={{\r\n            color: invalidQR ? \"#ffbb33\" : \"#28a745\",\r\n            marginTop: 10,\r\n            fontFamily: \"OpenSans_600SemiBold\",\r\n          }}\r\n        >\r\n          {invalidQR ? \"INVALID QR\" : \"SCANNING\"}\r\n        </Text>\r\n      </View>\r\n\r\n      <QrReader\r\n        facingMode={facing}\r\n        onLoad={() => {\r\n          console.log(\"QR Reader Loaded\");\r\n          DetectRTC.load(function () {\r\n            // console.log(DetectRTC.isWebsiteHasWebcamPermissions);\r\n          });\r\n        }}\r\n        delay={300}\r\n        onError={(error) => {\r\n          console.log(error.name);\r\n          if (error.name === \"NotAllowedError\") {\r\n            navigation.dispatch(\r\n              CommonActions.reset({ index: 0, routes: [{ name: \"NoCamera\" }] })\r\n            );\r\n          }\r\n        }}\r\n        onScan={(data) => {\r\n          scanned ? undefined : handleBarCodeScanned(data);\r\n        }}\r\n        style={{\r\n          width: dimensions.window.width < 565 ? \"100%\" : 510,\r\n          alignSelf: \"center\",\r\n        }}\r\n      />\r\n      <View\r\n        style={{\r\n          width: \"100%\",\r\n          flex: 1,\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <TouchableOpacity\r\n          onPress={changeFacing}\r\n          style={{\r\n            paddingHorizontal: 10,\r\n            alignSelf: \"center\",\r\n            backgroundColor: \"#1971ef\",\r\n            paddingVertical: 10,\r\n            borderRadius: 5,\r\n            marginBottom: 25,\r\n            marginTop: 25,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{\r\n              color: \"white\",\r\n              textAlign: \"center\",\r\n              letterSpacing: 1,\r\n              fontFamily: \"OpenSans_400Regular\",\r\n            }}\r\n          >\r\n            Switch Camera\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default QrScanScreen;\r\n"],"sourceRoot":""}