{"version":3,"sources":["assets/images/file-text.png","screens/SelectDocumentScreen.js"],"names":["module","exports","Version","loadable","SelectDocument","navigation","useState","ErrorInfo","SetErrorInfo","toast","useToast","useAssets","require","assets","style","styles","container","textAlign","marginBottom","fontSize","lineHeight","fontWeight","text","marginTop","btn","shadow","backgroundColor","onPress","recordcallback","a","async","DocumentPicker","type","result","codes","length","console","error","data","toString","keyRef","some","keyword","includes","indexStartKey","indexOf","indexEndKey","keywordBMKey","substring","keywordBMKeyFinal","slice","isNaN","year","parseInt","substr","day","month","date","Date","todayDate","getTime","getDate","center","width","maxWidth","padding","color","fontFamily","btnLine","Linking","openURL","btnText","options","weekday","dateQR","toLocaleString","AsyncStorage","setItem","indexStart","indexEnd","keywordKey","Analytics","purpose","dispatch","CommonActions","reset","index","routes","name","show","bold","id","duration","handlePDFUpload","configs","scale","once","value","start","step","stop","resultOpts","singleCodeInPage","multiCodesInPage","maxCodesInPage","improve","jsQR","size","PDF_QR_JS","decodeSinglePage","uri","height","marginRight","source"],"mappings":"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","file":"static/js/10.e7d8e93f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/file-text.a031f6ff.png\";","import React, { useState } from \"react\";\r\nimport { View, Text, TouchableOpacity, Image, Linking } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { CommonActions } from \"@react-navigation/native\";\r\nimport * as DocumentPicker from \"expo-document-picker\";\r\nimport { useToast } from \"react-native-toast-notifications\";\r\nimport { styles } from \"./styles\";\r\nimport loadable from \"@loadable/component\";\r\nimport { useAssets } from \"expo-asset\";\r\nconst Version = loadable(() => import(\"../components/Version/Version\"));\r\nimport { PDF_QR_JS } from \"pdf-qr\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport Loading from \"./Loading\";\r\nimport * as Analytics from \"expo-firebase-analytics\";\r\n\r\nconst SelectDocument = ({ navigation }) => {\r\n  const [ErrorInfo, SetErrorInfo] = useState(\"\");\r\n  const toast = useToast();\r\n  const [assets] = useAssets([require(\"../assets/images/file-text.png\")]);\r\n\r\n  const PickDocument = async () => {\r\n    try {\r\n      let result = await DocumentPicker.getDocumentAsync({\r\n        type: \"application/pdf\",\r\n      });\r\n      if (result.type !== \"cancel\") {\r\n        // PDF page target\r\n        const pageNr = 1;\r\n        // qr scanning configuration\r\n        const configs = {\r\n          scale: {\r\n            once: true,\r\n            value: 5,\r\n            start: 0.2,\r\n            step: 0.2,\r\n            stop: 2,\r\n          },\r\n          resultOpts: {\r\n            singleCodeInPage: true,\r\n            multiCodesInPage: false,\r\n            maxCodesInPage: 1,\r\n          },\r\n          improve: true,\r\n          jsQR: {},\r\n        };\r\n        SetErrorInfo(\r\n          <View style={{ marginTop: 20 }}>\r\n            <ClipLoader size=\"14px\" color=\"#1971ef\" />\r\n          </View>\r\n        );\r\n\r\n        PDF_QR_JS.decodeSinglePage(result.uri, pageNr, configs, recordcallback);\r\n\r\n        function recordcallback(result) {\r\n          // check if array is empty\r\n          if (result.codes.length === 0) {\r\n            console.error(\"No QR Found\");\r\n            SetErrorInfo(\"SafeKey QR Code not detected. Please try again.\");\r\n            return;\r\n          }\r\n          const handlePDFUpload = async () => {\r\n            const data = result.codes.toString();\r\n            const keywords = [\":BM.KEY:\", \":BM.VAX:\"];\r\n            const keyRef = [\":BM.KEY:\"];\r\n            if (keywords.some((keyword) => data.includes(keyword))) {\r\n              if (keyRef.some((keyword) => data.includes(keyword))) {\r\n                let indexStartKey = data.indexOf(\":\", 130);\r\n                let indexEndKey = data.indexOf(\"/\");\r\n                let keywordBMKey = data.substring(indexStartKey, indexEndKey);\r\n                let keywordBMKeyFinal = keywordBMKey.slice(1);\r\n                if (!isNaN(keywordBMKeyFinal)) {\r\n                  let year = parseInt(keywordBMKeyFinal.substr(0, 4), 10);\r\n                  let day = parseInt(keywordBMKeyFinal.substr(6), 10);\r\n                  let month = parseInt(keywordBMKeyFinal.substr(4, 2), 10);\r\n\r\n                  let date = new Date(year, month - 1, day);\r\n                  let todayDate = new Date();\r\n                  if (date.getTime() < todayDate.getTime()) {\r\n                    // If the date is in the past, show a toast\r\n                    if (date.getDate() < todayDate.getDate()) {\r\n                      return SetErrorInfo(\r\n                        <View\r\n                          style={[\r\n                            styles.center,\r\n                            {\r\n                              width: \"100%\",\r\n                              maxWidth: 500,\r\n                              marginTop: 20,\r\n                              padding: 10,\r\n                              textAlign: \"center\",\r\n                            },\r\n                          ]}\r\n                        >\r\n                          <Text\r\n                            style={[\r\n                              styles.text,\r\n                              {\r\n                                color: \"red\",\r\n                                fontFamily: \"OpenSans_600SemiBold\",\r\n                              },\r\n                            ]}\r\n                          >\r\n                            This SafeKey has expired. Click the button below to\r\n                            visit the SafeKey renewal page.{\" \"}\r\n                          </Text>\r\n\r\n                          <TouchableOpacity\r\n                            style={[\r\n                              styles.btn,\r\n                              styles.shadow,\r\n                              styles.btnLine,\r\n                              {\r\n                                marginTop: 10,\r\n                              },\r\n                            ]}\r\n                            onPress={() =>\r\n                              Linking.openURL(\"https://www.gov.bm/safekey\")\r\n                            }\r\n                          >\r\n                            <Text\r\n                              style={[styles.btnText, { color: \"#1971ef\" }]}\r\n                            >\r\n                              Renew\r\n                            </Text>\r\n                          </TouchableOpacity>\r\n                        </View>\r\n                      );\r\n                    }\r\n                  }\r\n\r\n                  let options = {\r\n                    weekday: \"long\",\r\n                    year: \"numeric\",\r\n                    month: \"long\",\r\n                    day: \"numeric\",\r\n                  };\r\n                  const dateQR = date.toLocaleString(\"en-US\", options);\r\n                  await AsyncStorage.setItem(\"passExpiry\", dateQR);\r\n                } else {\r\n                  console.error(\"parsed date is not a number\");\r\n                }\r\n              }\r\n              // take payload name and set as Key with the value being the parsed QR data. Every payload name is found\r\n              // between two colons in the parsed QR data\r\n              let indexStart = data.indexOf(\":\");\r\n              indexStart += 1;\r\n              let indexEnd = data.indexOf(\":\", indexStart + 1);\r\n              let keywordKey = data.substring(indexStart, indexEnd);\r\n              await AsyncStorage.setItem(keywordKey, data);\r\n              Analytics.logEvent(\"DocumentAdded\", {\r\n                type:\r\n                  keywordKey === \"BM.KEY\"\r\n                    ? \"SafeKey\"\r\n                    : \"Vaccination Certificate\",\r\n                purpose: \"User has added their SafeKey document\",\r\n              });\r\n              // Navigate to a different screen while passing the parsed QR data with it\r\n              navigation.dispatch(\r\n                CommonActions.reset({\r\n                  index: 0,\r\n                  routes: [{ name: \"QR List\" }],\r\n                })\r\n              );\r\n              toast.show(\r\n                keywordKey === \"BM.KEY\" ? (\r\n                  <View>\r\n                    <Text style={[styles.bold, { color: \"#fff\" }]}>\r\n                      SafeKey Added\r\n                    </Text>\r\n                  </View>\r\n                ) : (\r\n                  <View>\r\n                    <Text style={[styles.bold, { color: \"#fff\" }]}>\r\n                      Vaccination Certificate Added\r\n                    </Text>\r\n                  </View>\r\n                ),\r\n                {\r\n                  id: 3,\r\n                  type: \"success\",\r\n                  duration: 3500,\r\n                }\r\n              );\r\n            }\r\n          };\r\n          handlePDFUpload();\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!assets ? (\r\n        <Loading />\r\n      ) : (\r\n        <>\r\n          <View style={styles.container}>\r\n            <Text\r\n              style={{\r\n                textAlign: \"center\",\r\n                marginBottom: 0.5,\r\n                fontSize: 16,\r\n                marginBottom: 16,\r\n                lineHeight: 24,\r\n              }}\r\n            >\r\n              Add your SafeKey to your wallet by selecting your{\" \"}\r\n              <Text style={{ fontWeight: \"bold\" }}>SafeKey PDF Document </Text>\r\n              or{\" \"}\r\n              <Text style={{ fontWeight: \"bold\" }}>\r\n                Vaccination Certificate PDF Document\r\n              </Text>\r\n            </Text>\r\n            <Text\r\n              style={[\r\n                styles.text,\r\n                { fontWeight: \"bold\", marginTop: 15, marginBottom: 15 },\r\n              ]}\r\n            >\r\n              Select your PDF Document\r\n            </Text>\r\n            <TouchableOpacity\r\n              style={[\r\n                styles.btn,\r\n                styles.shadow,\r\n                { backgroundColor: \"#1971ef\" },\r\n              ]}\r\n              onPress={PickDocument}\r\n            >\r\n              <Text\r\n                style={[\r\n                  styles.center,\r\n                  {\r\n                    textAlign: \"center\",\r\n                    color: \"white\",\r\n                    fontSize: 17,\r\n                  },\r\n                ]}\r\n              >\r\n                <Image\r\n                  style={{ width: 20, height: 20, marginRight: 8 }}\r\n                  source={require(\"../assets/images/file-text.png\")}\r\n                />\r\n                Select\r\n              </Text>\r\n            </TouchableOpacity>\r\n            <Text>{ErrorInfo ? ErrorInfo : \"\"}</Text>\r\n          </View>\r\n          <Version />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default SelectDocument;\r\n"],"sourceRoot":""}