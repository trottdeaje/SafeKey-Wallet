{"version":3,"sources":["node_modules/react-native-web/src/modules/isWebColor/index.js","node_modules/react-native-web/src/exports/processColor/index.js","node_modules/react-native-web/src/modules/normalizeColor/index.js","../src/NativeLinearGradient.web.tsx","../src/LinearGradient.tsx","components/QrTile/QrTile.js","components/QrTile/script.js"],"names":["isWebColor","color","indexOf","processColor","undefined","int32Color","normalizeColor","opacity","colorInt","r","g","b","a","alpha","toFixed","NativeLinearGradient","colors","locations","startPoint","endPoint","props","layout","setLayout","gradientColors","setGradientColors","pseudoAngle","setPseudoAngle","width","height","correctedStartPoint","Array","isArray","correctedEndPoint","getControlPoints","start","end","py","px","Math","atan2","PI","nextGradientColors","map","index","output","max","min","backgroundImage","join","View","style","onLayout","event","nativeEvent","x","y","oldLayout","this","resolvedLocations","length","console","warn","slice","Platform","select","web","default","_normalizePoint","point","QrTile","useState","tileBg","setTileBg","tileBgTwo","setTileBgTwo","myRef","React","createRef","hideMenu","current","display","document","removeEventListener","useEffect","name","navigation","useNavigation","styles","shadow","marginBottom","paddingLeft","borderRadius","TouchableOpacity","justifyContent","flexDirection","alignItems","onPress","navigate","infoScreen","paddingVertical","Text","fontFamily","textAlign","fontSize","addEventListener","center","Ionicons","size","backgroundColor","position","right","top","ref","value","type","async","AsyncStorage","removeItem","Analytics","purpose","alert","paddingHorizontal"],"mappings":"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","file":"static/js/18.6ab49c56.chunk.js","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst isWebColor = (color: string): boolean =>\n  color === 'currentcolor' ||\n  color === 'currentColor' ||\n  color === 'inherit' ||\n  color.indexOf('var(') === 0;\n\nexport default isWebColor;\n","/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport normalizeColor from 'normalize-css-color';\n\nconst processColor = (color?: string | number): ?number => {\n  if (color === undefined || color === null) {\n    return color;\n  }\n\n  // convert number and hex\n  let int32Color = normalizeColor(color);\n  if (int32Color === undefined || int32Color === null) {\n    return undefined;\n  }\n\n  int32Color = ((int32Color << 24) | (int32Color >>> 8)) >>> 0;\n\n  return int32Color;\n};\n\nexport default processColor;\n","/**\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport isWebColor from '../isWebColor';\nimport processColor from '../../exports/processColor';\n\nconst normalizeColor = (color?: number | string, opacity?: number = 1): void | string => {\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  const colorInt = processColor(color);\n  if (colorInt != null) {\n    const r = (colorInt >> 16) & 255;\n    const g = (colorInt >> 8) & 255;\n    const b = colorInt & 255;\n    const a = ((colorInt >> 24) & 255) / 255;\n    const alpha = (a * opacity).toFixed(2);\n    return `rgba(${r},${g},${b},${alpha})`;\n  }\n};\n\nexport default normalizeColor;\n","import * as React from 'react';\nimport { LayoutRectangle, View } from 'react-native';\nimport normalizeColor from 'react-native-web/src/modules/normalizeColor';\n\nimport { NativeLinearGradientPoint, NativeLinearGradientProps } from './NativeLinearGradient.types';\n\nexport default function NativeLinearGradient({\n  colors,\n  locations,\n  startPoint,\n  endPoint,\n  ...props\n}: NativeLinearGradientProps): React.ReactElement {\n  const [layout, setLayout] = React.useState<LayoutRectangle | null>(null);\n  const [gradientColors, setGradientColors] = React.useState<string[]>([]);\n  const [pseudoAngle, setPseudoAngle] = React.useState<number>(0);\n\n  const { width = 1, height = 1 } = layout ?? {};\n  React.useEffect(() => {\n    const getControlPoints = (): NativeLinearGradientPoint[] => {\n      let correctedStartPoint: NativeLinearGradientPoint = [0, 0];\n      if (Array.isArray(startPoint)) {\n        correctedStartPoint = [\n          startPoint[0] != null ? startPoint[0] : 0.0,\n          startPoint[1] != null ? startPoint[1] : 0.0,\n        ];\n      }\n      let correctedEndPoint: NativeLinearGradientPoint = [0.0, 1.0];\n      if (Array.isArray(endPoint)) {\n        correctedEndPoint = [\n          endPoint[0] != null ? endPoint[0] : 0.0,\n          endPoint[1] != null ? endPoint[1] : 1.0,\n        ];\n      }\n      return [correctedStartPoint, correctedEndPoint];\n    };\n\n    const [start, end] = getControlPoints();\n    start[0] *= width;\n    end[0] *= width;\n    start[1] *= height;\n    end[1] *= height;\n    const py = end[1] - start[1];\n    const px = end[0] - start[0];\n\n    setPseudoAngle(90 + (Math.atan2(py, px) * 180) / Math.PI);\n  }, [width, height, startPoint, endPoint]);\n\n  React.useEffect(() => {\n    const nextGradientColors = colors.map((color: number, index: number): string => {\n      const hexColor = normalizeColor(color);\n      let output = hexColor;\n      if (locations && locations[index]) {\n        const location = Math.max(0, Math.min(1, locations[index]));\n        // Convert 0...1 to 0...100\n        const percentage = location * 100;\n        output += ` ${percentage}%`;\n      }\n      return output;\n    });\n\n    setGradientColors(nextGradientColors);\n  }, [colors, locations]);\n\n  const colorStyle = gradientColors.join(',');\n  const backgroundImage = `linear-gradient(${pseudoAngle}deg, ${colorStyle})`;\n  // TODO(Bacon): In the future we could consider adding `backgroundRepeat: \"no-repeat\"`. For more\n  // browser support.\n  return (\n    <View\n      {...props}\n      style={[\n        props.style,\n        // @ts-ignore: [ts] Property 'backgroundImage' does not exist on type 'ViewStyle'.\n        { backgroundImage },\n      ]}\n      onLayout={event => {\n        const { x, y, width, height } = event.nativeEvent.layout;\n        const oldLayout = layout ?? { x: 0, y: 0, width: 1, height: 1 };\n        // don't set new layout state unless the layout has actually changed\n        if (\n          x !== oldLayout.x ||\n          y !== oldLayout.y ||\n          width !== oldLayout.width ||\n          height !== oldLayout.height\n        ) {\n          setLayout({ x, y, width, height });\n        }\n\n        if (props.onLayout) {\n          props.onLayout(event);\n        }\n      }}\n    />\n  );\n}\n","import * as React from 'react';\nimport { Platform, processColor, View } from 'react-native';\n\nimport NativeLinearGradient from './NativeLinearGradient';\nimport { NativeLinearGradientPoint } from './NativeLinearGradient.types';\n\nexport type LinearGradientPoint = { x: number; y: number } | NativeLinearGradientPoint;\n\nexport type LinearGradientProps = {\n  /**\n   * An array of colors that represent stops in the gradient. At least two colors are required\n   * (for a single-color background, use the `style.backgroundColor` prop on a `View` component).\n   */\n  colors: string[];\n  /**\n   * An array that contains `number`s ranging from 0 to 1, inclusive, and is the same length as the `colors` property.\n   * Each number indicates a color-stop location where each respective color should be located.\n   *\n   * For example, `[0.5, 0.8]` would render:\n   * - the first color, solid, from the beginning of the gradient view to 50% through (the middle);\n   * - a gradient from the first color to the second from the 50% point to the 80% point; and\n   * - the second color, solid, from the 80% point to the end of the gradient view.\n   *\n   * The color-stop locations must be ascending from least to greatest.\n   */\n  locations?: number[] | null;\n  /**\n   * An object `{ x: number; y: number }` or array `[x, y]` that represents the point\n   * at which the gradient starts, as a fraction of the overall size of the gradient ranging from 0 to 1, inclusive.\n   *\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will start `10%` from the left and `20%` from the top.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the starting position.\n   */\n  start?: LinearGradientPoint | null;\n  /**\n   * An object `{ x: number; y: number }` or array `[x, y]` that represents the point\n   * at which the gradient ends, as a fraction of the overall size of the gradient ranging from 0 to 1, inclusive.\n   *\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will end `10%` from the left and `20%` from the bottom.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the end position.\n   */\n  end?: LinearGradientPoint | null;\n} & React.ComponentProps<typeof View>;\n\n/**\n * Renders a native view that transitions between multiple colors in a linear direction.\n */\nexport class LinearGradient extends React.Component<LinearGradientProps> {\n  render() {\n    const { colors, locations, start, end, ...props } = this.props;\n    let resolvedLocations = locations;\n    if (locations && colors.length !== locations.length) {\n      console.warn('LinearGradient colors and locations props should be arrays of the same length');\n      resolvedLocations = locations.slice(0, colors.length);\n    }\n\n    return (\n      <NativeLinearGradient\n        {...props}\n        colors={Platform.select({\n          web: colors as any,\n          default: colors.map(processColor),\n        })}\n        locations={resolvedLocations}\n        startPoint={_normalizePoint(start)}\n        endPoint={_normalizePoint(end)}\n      />\n    );\n  }\n}\n\nfunction _normalizePoint(\n  point: LinearGradientPoint | null | undefined\n): [number, number] | undefined {\n  if (!point) {\n    return undefined;\n  }\n\n  if (Array.isArray(point) && point.length !== 2) {\n    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');\n    return undefined;\n  }\n\n  return Array.isArray(point) ? point : [point.x, point.y];\n}\n","import React, { useEffect, useState } from \"react\";\r\nimport { View, TouchableOpacity, Text } from \"react-native\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\nimport { removeValue } from \"./script\";\r\nimport { LinearGradient } from \"expo-linear-gradient\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { styles } from \"../../screens/styles\";\r\nconst QrTile = (props) => {\r\n  const [tileBg, setTileBg] = useState(\"#000\");\r\n  const [tileBgTwo, setTileBgTwo] = useState(\"#000\");\r\n\r\n  const myRef = React.createRef();\r\n\r\n  const showMenu = () => {\r\n    myRef.current.style.display = \"flex\";\r\n    document.addEventListener(\"click\", hideMenu);\r\n  };\r\n\r\n  const hideMenu = () => {\r\n    if (myRef.current) {\r\n      myRef.current.style.display = \"none\";\r\n      document.removeEventListener(\"click\", hideMenu);\r\n    } else return;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.name == \"Vaccination Certificate\") {\r\n      setTileBg(\"#fc9cc7\");\r\n      setTileBgTwo(\"#fc9cc7\");\r\n    } else if (props.name == \"SafeKey\") {\r\n      setTileBg(\"#5299e1\");\r\n      setTileBgTwo(\"#66b0ff\");\r\n    }\r\n  }, [props.name]);\r\n\r\n  const navigation = useNavigation();\r\n\r\n  return (\r\n    <View style={{ width: \"100%\" }}>\r\n      <LinearGradient\r\n        start={{ x: 1, y: 0 }}\r\n        end={{ x: 0, y: 0 }}\r\n        colors={[tileBg, tileBgTwo]}\r\n        style={[\r\n          styles.shadow,\r\n          {\r\n            width: \"100%\",\r\n            marginBottom: 15,\r\n            paddingLeft: 15,\r\n            borderRadius: 10,\r\n          },\r\n        ]}\r\n      >\r\n        <TouchableOpacity\r\n          style={{\r\n            justifyContent: \"space-between\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n          }}\r\n          onPress={() => navigation.navigate(props.infoScreen)}\r\n        >\r\n          <View style={{ paddingVertical: 15 }}>\r\n            <Text\r\n              style={{\r\n                fontFamily: \"OpenSans_600SemiBold\",\r\n                color: \"white\",\r\n                textAlign: \"left\",\r\n                fontSize: 16,\r\n              }}\r\n            >\r\n              {props.name}\r\n            </Text>\r\n          </View>\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              showMenu();\r\n            }}\r\n            style={[\r\n              styles.center,\r\n              {\r\n                height: \"100%\",\r\n                width: 50,\r\n                flexDirection: \"row\",\r\n              },\r\n            ]}\r\n          >\r\n            <Ionicons name=\"ios-ellipsis-vertical\" size={24} color=\"white\" />\r\n          </TouchableOpacity>\r\n          <View\r\n            style={[\r\n              styles.shadow,\r\n              {\r\n                display: \"none\",\r\n                flexDirection: \"column\",\r\n                backgroundColor: \"#fff\",\r\n                borderRadius: 5,\r\n                position: \"absolute\",\r\n                right: 40,\r\n                top: 11,\r\n              },\r\n            ]}\r\n            ref={myRef}\r\n          >\r\n            <TouchableOpacity\r\n              onPress={() => {\r\n                removeValue(props.type);\r\n                props.removeItem();\r\n              }}\r\n              style={{\r\n                paddingHorizontal: 20,\r\n                paddingVertical: 5,\r\n              }}\r\n            >\r\n              <Text\r\n                style={{ fontFamily: \"OpenSans_400Regular\", color: \"#dc3545\" }}\r\n              >\r\n                Delete\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </TouchableOpacity>\r\n      </LinearGradient>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default QrTile;\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport * as Analytics from \"expo-firebase-analytics\";\r\n\r\nexport const removeValue = async (value) => {\r\n  try {\r\n    if (value === \"BM.KEY\") {\r\n      await AsyncStorage.removeItem(\"passExpiry\");\r\n    }\r\n    await AsyncStorage.removeItem(value);\r\n    // Send analytics when user deletes safekey\r\n    Analytics.logEvent(\"QrDeleted\", {\r\n      type: value === \"BM.KEY\" ? \"SafeKey\" : \"Vaccination Certificate\",\r\n      purpose: \"user deleted a safekey\",\r\n    });\r\n  } catch (e) {\r\n    alert(e);\r\n  }\r\n};\r\n"],"sourceRoot":""}