{"version":3,"sources":["screens/ShowSafeKeyQrScreen.js"],"names":["QRCode","loadable","Version","ShowQrPass","navigation","useState","passExists","setPassExists","passkey","setPasskey","passExpiry","setPassExpiry","useEffect","a","async","AsyncStorage","getItem","value","getPasskey","e","alert","dispatch","StackActions","replace","getPassExpiry","style","styles","container","QrHeader","center","borderWidth","borderColor","bmQrLogo","source","require","size","quietZone","color","bold","marginTop","fontSize","text","onPress","CommonActions","reset","index","routes","name","btn","shadow","backgroundColor","marginBottom","maxWidth","btnText"],"mappings":"yNAOMA,EAASC,aAAS,kBAAM,uDACxBC,EAAUD,aAAS,kBAAM,iCA+GhBE,UA5GI,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACpB,EAAoCC,mBAAS,MAA7C,WAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8BF,mBAAS,MAAvC,WAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,MAA7C,WAAOK,EAAP,KAAmBC,EAAnB,KAuCA,OArCAC,qBAAU,WACR,KACE,mBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACsBE,IAAaC,QAAQ,WAD3C,OAEgB,QADRC,EADR,SAGIV,GAAc,GACdE,EAAWQ,IAEXV,GAAc,GANlB,4DASAW,GACA,MAAOC,GACPC,MAAMD,MAEP,CAACb,IAEJM,qBAAU,YACW,IAAfN,GACFF,EAAWiB,SAASC,eAAaC,QAAQ,cAE1C,CAACjB,IAEJM,qBAAU,WACR,KACE,mBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACsBE,IAAaC,QAAQ,eAD3C,OAEgB,QADRC,EADR,SAGIN,EAAcM,GAHlB,4DAMAO,GACA,MAAOL,GACPC,MAAMD,MAEP,IAGD,oCACIX,EAGA,kBAAC,IAAD,CAAMiB,MAAOC,IAAOC,WAClB,kBAAC,IAAD,CAAMF,MAAOC,IAAOE,UAApB,WACA,kBAAC,IAAD,CAAMH,MAAOC,IAAOG,QAClB,kBAAC,IAAD,CACEJ,MAAO,CACLC,IAAOG,OACP,CACEC,YAAa,EACbC,YAAa,aAIjB,kBAAC,IAAD,CACEN,MAAOC,IAAOM,SACdC,OAAQC,EAAQ,OAElB,kBAAClC,EAAD,CACEiB,MAAOT,EACP2B,KAAM,IACNC,UAAW,GACXC,MAAO,aAGT3B,EAGA,kBAAC,IAAD,CAAMe,MAAO,CAACC,IAAOY,KAAM,CAAEC,UAAW,GAAIC,SAAU,MAAtD,UACU,IACR,kBAAC,IAAD,CAAMf,MAAO,CAACC,IAAOe,KAAM,CAAED,SAAU,MACpC9B,IALL,kBAAC,IAAD,OAWJ,kBAAC,IAAD,CACEgC,QAAS,kBACPtC,EAAWiB,SACTsB,gBAAcC,MAAM,CAAEC,MAAO,EAAGC,OAAQ,CAAC,CAAEC,KAAM,gBAGrDtB,MAAO,CACLC,IAAOsB,IACPtB,IAAOuB,OACP,CACEC,gBAAiB,UACjBX,UAAW,GACXY,aAAc,GACdC,SAAU,OAId,kBAAC,IAAD,CAAM3B,MAAO,CAACC,IAAO2B,QAAS,CAAEhB,MAAO,UAAvC,aAtDJ,kBAAC,IAAD,MA0DF,kBAACnC,EAAD","file":"static/js/18.5e0ffd5e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { View, Text, TouchableOpacity, Image } from \"react-native\";\r\nimport { StackActions } from \"@react-navigation/native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { CommonActions } from \"@react-navigation/native\";\r\nimport { styles } from \"./styles\";\r\nimport loadable from \"@loadable/component\";\r\nconst QRCode = loadable(() => import(\"react-native-qrcode-svg\"));\r\nconst Version = loadable(() => import(\"../components/Version/Version\"));\r\nimport Loading from \"./Loading\";\r\n\r\nconst ShowQrPass = ({ navigation }) => {\r\n  const [passExists, setPassExists] = useState(null);\r\n  const [passkey, setPasskey] = useState(null);\r\n  const [passExpiry, setPassExpiry] = useState(null);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      async function getPasskey() {\r\n        const value = await AsyncStorage.getItem(\"BM.KEY\");\r\n        if (value !== null) {\r\n          setPassExists(true);\r\n          setPasskey(value);\r\n        } else {\r\n          setPassExists(false);\r\n        }\r\n      }\r\n      getPasskey();\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n  }, [passExists]);\r\n\r\n  useEffect(() => {\r\n    if (passExists === false) {\r\n      navigation.dispatch(StackActions.replace(\"QR List\"));\r\n    }\r\n  }, [passExists]);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      async function getPassExpiry() {\r\n        const value = await AsyncStorage.getItem(\"passExpiry\");\r\n        if (value !== null) {\r\n          setPassExpiry(value);\r\n        }\r\n      }\r\n      getPassExpiry();\r\n    } catch (e) {\r\n      alert(e);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {!passkey ? (\r\n        <Loading />\r\n      ) : (\r\n        <View style={styles.container}>\r\n          <Text style={styles.QrHeader}>SafeKey</Text>\r\n          <View style={styles.center}>\r\n            <View\r\n              style={[\r\n                styles.center,\r\n                {\r\n                  borderWidth: 5,\r\n                  borderColor: \"#63acfa\",\r\n                },\r\n              ]}\r\n            >\r\n              <Image\r\n                style={styles.bmQrLogo}\r\n                source={require(\"../assets/images/bm-logo.svg\")}\r\n              />\r\n              <QRCode\r\n                value={passkey}\r\n                size={300}\r\n                quietZone={10}\r\n                color={\"#121212\"}\r\n              />\r\n            </View>\r\n            {!passExpiry ? (\r\n              <Text></Text>\r\n            ) : (\r\n              <Text style={[styles.bold, { marginTop: 20, fontSize: 18 }]}>\r\n                Expiry:{\" \"}\r\n                <Text style={[styles.text, { fontSize: 18 }]}>\r\n                  {passExpiry}\r\n                </Text>\r\n              </Text>\r\n            )}\r\n          </View>\r\n\r\n          <TouchableOpacity\r\n            onPress={() =>\r\n              navigation.dispatch(\r\n                CommonActions.reset({ index: 0, routes: [{ name: \"QR List\" }] })\r\n              )\r\n            }\r\n            style={[\r\n              styles.btn,\r\n              styles.shadow,\r\n              {\r\n                backgroundColor: \"#1971ef\",\r\n                marginTop: 20,\r\n                marginBottom: 25,\r\n                maxWidth: 250,\r\n              },\r\n            ]}\r\n          >\r\n            <Text style={[styles.btnText, { color: \"#fff\" }]}>Go Back</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n      )}\r\n      <Version />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShowQrPass;\r\n"],"sourceRoot":""}