{"version":3,"sources":["components/Modal/Modal.js","components/Version/Version.js","assets/icon.png"],"names":["modalStyle","StyleSheet","create","modalInnerView","maxWidth","backgroundColor","borderRadius","overflow","IconView","flexDirection","marginVertical","AppIcon","width","height","marginHorizontal","ModalComponent","props","useState","showModal","setShowModal","show","onClose","useEffect","animationIn","isVisible","View","style","styles","center","position","top","right","TouchableOpacity","onPress","Ionicons","name","size","color","shadow","marginRight","Image","source","require","Text","bold","fontSize","fontFamily","marginBottom","text","textAlign","paddingVertical","VersionStyle","container","bottom","left","display","alignItems","justifyContent","paddingHorizontal","btnText","Version","modalVisible","setModalVisible","devicePlatform","setDevicePlatform","showInstallBtn","setShowInstallBtn","userAgent","window","navigator","platform","os","indexOf","test","getOS","addEventListener","event","console","log","deferredPrompt","standalone","matchMedia","matches","a","async","promptEvent","error","prompt","userChoice","result","handleInstallBtnClick","alert","shadowColor","Modal","module","exports"],"mappings":"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","file":"static/js/15.a70cbff5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { View, Text, StyleSheet, TouchableOpacity, Image } from \"react-native\";\r\nimport Modal from \"react-native-modal\";\r\nimport { Ionicons } from \"@expo/vector-icons\";\r\nimport { styles } from \"../../screens/styles\";\r\n\r\nconst ModalComponent = (props) => {\r\n  const [showModal, setShowModal] = useState(false);\r\n  const { show, onClose } = props;\r\n\r\n  useEffect(() => {\r\n    setShowModal(show);\r\n  }, [show]);\r\n\r\n  return (\r\n    <Modal animationIn=\"fadeInDownBig\" isVisible={showModal}>\r\n      <View style={styles.center}>\r\n        <View style={[modalStyle.modalInnerView, styles.center]}>\r\n          <View style={{ position: \"absolute\", top: 7, right: 7 }}>\r\n            <TouchableOpacity onPress={() => onClose()}>\r\n              <Ionicons name=\"close-outline\" size={28} color=\"black\" />\r\n            </TouchableOpacity>\r\n          </View>\r\n          <View style={[modalStyle.IconView, styles.center]}>\r\n            <View style={modalStyle.AppIcon}></View>\r\n            <View style={modalStyle.AppIcon}></View>\r\n            <View\r\n              style={[\r\n                modalStyle.AppIcon,\r\n                styles.shadow,\r\n                {\r\n                  marginRight: 4,\r\n                  width: 90,\r\n                  height: 90,\r\n                  borderRadius: 5,\r\n                },\r\n              ]}\r\n            >\r\n              <Image\r\n                source={require(\"../../assets/icon.png\")}\r\n                style={[\r\n                  {\r\n                    borderRadius: 5,\r\n                    width: 90,\r\n                    height: 90,\r\n                  },\r\n                ]}\r\n              />\r\n            </View>\r\n\r\n            <View style={modalStyle.AppIcon}></View>\r\n            <View style={modalStyle.AppIcon}></View>\r\n          </View>\r\n          <Text\r\n            style={[\r\n              styles.bold,\r\n              {\r\n                fontSize: 20,\r\n                fontFamily: \"OpenSans_700Bold\",\r\n                marginBottom: 20,\r\n              },\r\n            ]}\r\n          >\r\n            Install SafeKey Wallet\r\n          </Text>\r\n          <Text\r\n            style={[\r\n              styles.text,\r\n              {\r\n                marginHorizontal: 20,\r\n                textAlign: \"center\",\r\n                fontSize: 16,\r\n                marginBottom: 20,\r\n              },\r\n            ]}\r\n          >\r\n            Install SafeKey Wallet on your home screen for quick and easy access\r\n            when you're on the go.\r\n          </Text>\r\n          <View\r\n            style={[\r\n              styles.center,\r\n              {\r\n                backgroundColor: \"#f9f9f9\",\r\n                width: \"100%\",\r\n                paddingVertical: 15,\r\n              },\r\n            ]}\r\n          >\r\n            <Text style={[styles.center, styles.text]}>\r\n              Just tap\r\n              <Image\r\n                style={{\r\n                  width: 18,\r\n                  height: 18,\r\n                  marginHorizontal: 4,\r\n                  marginBottom: 3,\r\n                }}\r\n                source={require(\"../../assets/images/share-min.svg\")}\r\n              />\r\n              then 'Add to Home Screen'\r\n            </Text>\r\n          </View>\r\n        </View>\r\n      </View>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst modalStyle = StyleSheet.create({\r\n  modalInnerView: {\r\n    maxWidth: 350,\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 5,\r\n    overflow: \"hidden\",\r\n  },\r\n  IconView: {\r\n    overflow: \"hidden\",\r\n    flexDirection: \"row\",\r\n    marginVertical: 30,\r\n  },\r\n  AppIcon: {\r\n    width: 80,\r\n    height: 80,\r\n    backgroundColor: \"#f0f0f0\",\r\n    borderRadius: 5,\r\n    marginHorizontal: 4,\r\n    marginVertical: 8,\r\n  },\r\n});\r\n\r\nexport default ModalComponent;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { View, Text, StyleSheet, TouchableOpacity } from \"react-native\";\r\nimport { styles } from \"../../screens/styles\";\r\nimport ModalComponent from \"../Modal/Modal\";\r\n\r\nconst Version = () => {\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [devicePlatform, setDevicePlatform] = useState(null);\r\n  const [showInstallBtn, setShowInstallBtn] = useState(false);\r\n\r\n  function getOS() {\r\n    var userAgent = window.navigator.userAgent,\r\n      platform = window.navigator.platform,\r\n      macosPlatforms = [\"Macintosh\", \"MacIntel\", \"MacPPC\", \"Mac68K\"],\r\n      windowsPlatforms = [\"Win32\", \"Win64\", \"Windows\", \"WinCE\"],\r\n      iosPlatforms = [\"iPhone\", \"iPad\", \"iPod\"],\r\n      os = null;\r\n\r\n    if (macosPlatforms.indexOf(platform) !== -1) {\r\n      os = \"Mac OS\";\r\n    } else if (iosPlatforms.indexOf(platform) !== -1) {\r\n      os = \"iOS\";\r\n    } else if (windowsPlatforms.indexOf(platform) !== -1) {\r\n      os = \"Windows\";\r\n    } else if (/Android/.test(userAgent)) {\r\n      os = \"Android\";\r\n    } else if (!os && /Linux/.test(platform)) {\r\n      os = \"Linux\";\r\n    }\r\n    // return os;\r\n    setDevicePlatform(os);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getOS();\r\n    if (devicePlatform === \"iOS\") {\r\n      setShowInstallBtn(true);\r\n    } else if (devicePlatform === \"Android\") {\r\n      return;\r\n    } else {\r\n      setShowInstallBtn(false);\r\n    }\r\n  }, [devicePlatform]);\r\n\r\n  window.addEventListener(\"beforeinstallprompt\", (event) => {\r\n    console.log(\"👍\", \"beforeinstallprompt\", event);\r\n    // Stash the event so it can be triggered later.\r\n    window.deferredPrompt = event;\r\n    // Update UI notify the user they can install the PWA\r\n    setShowInstallBtn(true);\r\n    // Optionally, send analytics event that PWA install promo was shown.\r\n    console.log(`'beforeinstallprompt' event was fired.`);\r\n  });\r\n\r\n  const handleInstallBtnClick = async () => {\r\n    console.log(\"👍\", \"butInstall-clicked\");\r\n    const promptEvent = window.deferredPrompt;\r\n    if (!promptEvent) {\r\n      // The deferred prompt isn't available.\r\n      console.error(\"👎\", \"The deferred prompt is not available.\");\r\n      return;\r\n    }\r\n    // Show the install prompt.\r\n    promptEvent.prompt();\r\n    // Log the result\r\n    const result = await promptEvent.userChoice;\r\n    console.log(\"👍\", \"userChoice\", result);\r\n    // Reset the deferred prompt variable, since\r\n    // prompt() can only be called once.\r\n    window.deferredPrompt = null;\r\n  };\r\n\r\n  window.addEventListener(\"appinstalled\", () => {\r\n    // Hide the app-provided install promotion\r\n    setShowInstallBtn(false);\r\n    // Clear the deferredPrompt so it can be garbage collected\r\n    window.deferredPrompt = null;\r\n    // Optionally, send analytics event to indicate successful install\r\n    console.log(\"PWA was installed\");\r\n  });\r\n\r\n  function isInstalled() {\r\n    // For iOS\r\n    if (window.navigator.standalone) return true;\r\n\r\n    // For Android\r\n    if (window.matchMedia(\"(display-mode: standalone)\").matches) return true;\r\n\r\n    // If neither is true, it's not installed\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <View style={VersionStyle.container}>\r\n        <Text style={VersionStyle.text}>Version: 1.1.7</Text>\r\n\r\n        {showInstallBtn && !isInstalled() ? (\r\n          <TouchableOpacity\r\n            onPress={() => {\r\n              console.log(devicePlatform);\r\n              if (devicePlatform === \"iOS\") {\r\n                setModalVisible(true);\r\n              } else if (devicePlatform === \"Android\") {\r\n                handleInstallBtnClick();\r\n              } else {\r\n                alert(\"other\");\r\n              }\r\n            }}\r\n            style={[\r\n              styles.center,\r\n              styles.shadow,\r\n              {\r\n                borderRadius: 50,\r\n                backgroundColor: \"#1971ef\",\r\n                shadowColor: \"#0a418f\",\r\n              },\r\n            ]}\r\n          >\r\n            <Text style={[VersionStyle.btnText]}>Install</Text>\r\n          </TouchableOpacity>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </View>\r\n      <ModalComponent\r\n        onClose={() => setModalVisible(false)}\r\n        show={modalVisible}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nconst VersionStyle = StyleSheet.create({\r\n  container: {\r\n    position: \"absolute\",\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0,\r\n    height: 50,\r\n    backgroundColor: \"#f5f5f5\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"space-between\",\r\n    flexDirection: \"row\",\r\n    paddingHorizontal: 15,\r\n  },\r\n  text: {\r\n    color: \"#0000008c\",\r\n  },\r\n  btnText: {\r\n    paddingHorizontal: 12,\r\n    paddingVertical: 5,\r\n    fontSize: 14,\r\n    color: \"#fff\",\r\n  },\r\n});\r\n\r\nexport default Version;\r\n","module.exports = __webpack_public_path__ + \"static/media/icon.1092b622.png\";"],"sourceRoot":""}