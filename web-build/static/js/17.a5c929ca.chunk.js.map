{"version":3,"sources":["node_modules/react-native-web/dist/exports/Linking/index.js","screens/QrScanScreen.js"],"names":["initialURL","canUseDOM","window","location","href","Linking","_this","this","_eventCallbacks","addEventListener","event","callback","push","removeEventListener","filteredCallbacks","filter","c","toString","_proto","prototype","_dispatchEvent","_len","arguments","length","data","Array","_key","listeners","isArray","map","listener","apply","canOpenURL","Promise","resolve","getInitialURL","openURL","url","open","e","reject","_validateURL","invariant","urlToOpen","URL","QrReader","loadable","Dimensions","get","screen","QrScanScreen","navigation","useState","scanned","setScanned","facing","setFacing","invalidQR","setInvalidQR","dimensions","setDimensions","toast","useToast","onChange","useEffect","style","styles","container","backgroundColor","marginBottom","center","fontSize","lineHeight","textAlign","position","textAlignVertical","margin","zIndex","flex","minHeight","color","marginTop","fontFamily","facingMode","onLoad","console","log","delay","onError","error","name","dispatch","CommonActions","reset","index","routes","onScan","a","async","keywords","keyRef","some","keyword","includes","indexStartKey","indexOf","indexEndKey","keywordBMKey","substring","keywordBMKeyFinal","slice","isNaN","year","parseInt","substr","day","month","date","Date","todayDate","getTime","show","onPress","hide","bold","text","offsetBottom","id","duration","type","normalColor","goBack","options","weekday","dateQR","toLocaleString","AsyncStorage","setItem","indexStart","indexEnd","keywordKey","Analytics","purpose","handleBarCodeScanned","width","alignSelf","justifyContent","paddingHorizontal","paddingVertical","borderRadius","letterSpacing"],"mappings":"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","file":"static/js/17.a5c929ca.chunk.js","sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport invariant from 'fbjs/lib/invariant';\nvar initialURL = canUseDOM ? window.location.href : '';\n\nvar Linking = /*#__PURE__*/function () {\n  function Linking() {\n    var _this = this;\n\n    this._eventCallbacks = {};\n\n    this.addEventListener = function (event, callback) {\n      if (!_this._eventCallbacks[event]) {\n        _this._eventCallbacks[event] = [callback];\n        return;\n      }\n\n      _this._eventCallbacks[event].push(callback);\n    };\n\n    this.removeEventListener = function (event, callback) {\n      var callbacks = _this._eventCallbacks[event];\n      var filteredCallbacks = callbacks.filter(function (c) {\n        return c.toString() !== callback.toString();\n      });\n      _this._eventCallbacks[event] = filteredCallbacks;\n    };\n  }\n\n  var _proto = Linking.prototype;\n\n  _proto._dispatchEvent = function _dispatchEvent(event) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n\n    var listeners = this._eventCallbacks[event];\n\n    if (listeners != null && Array.isArray(listeners)) {\n      listeners.map(function (listener) {\n        listener.apply(void 0, data);\n      });\n    }\n  }\n  /**\n   * Adds a event listener for the specified event. The callback will be called when the\n   * said event is dispatched.\n   */\n  ;\n\n  _proto.canOpenURL = function canOpenURL() {\n    return Promise.resolve(true);\n  };\n\n  _proto.getInitialURL = function getInitialURL() {\n    return Promise.resolve(initialURL);\n  }\n  /**\n   * Try to open the given url in a secure fashion. The method returns a Promise object.\n   * If the url opens, the promise is resolved. If not, the promise is rejected.\n   * Dispatches the `onOpen` event if `url` is opened successfully\n   */\n  ;\n\n  _proto.openURL = function openURL(url) {\n    try {\n      open(url);\n\n      this._dispatchEvent('onOpen', url);\n\n      return Promise.resolve();\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto._validateURL = function _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  };\n\n  return Linking;\n}();\n\nvar open = function open(url) {\n  if (canUseDOM) {\n    var urlToOpen = new URL(url, window.location).toString();\n    window.open(urlToOpen, '_blank', 'noopener');\n  }\n};\n\nexport default new Linking();","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  Dimensions,\r\n  Linking,\r\n} from \"react-native\";\r\n\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { CommonActions } from \"@react-navigation/native\";\r\nimport loadable from \"@loadable/component\";\r\nconst QrReader = loadable(() => import(\"react-qr-reader\"));\r\nimport * as Analytics from \"expo-firebase-analytics\";\r\nimport { useToast } from \"react-native-toast-notifications\";\r\nimport { styles } from \"./styles\";\r\n\r\nconst window = Dimensions.get(\"window\");\r\nconst screen = Dimensions.get(\"screen\");\r\n\r\nconst QrScanScreen = ({ navigation }) => {\r\n  const [scanned, setScanned] = useState(false);\r\n  const [facing, setFacing] = useState(\"environment\");\r\n  const [invalidQR, setInvalidQR] = useState(false);\r\n  const [dimensions, setDimensions] = useState({ window, screen });\r\n  const toast = useToast();\r\n\r\n  const onChange = ({ window, screen }) => {\r\n    setDimensions({ window, screen });\r\n  };\r\n\r\n  const changeFacing = () => {\r\n    facing === \"environment\" ? setFacing(\"user\") : setFacing(\"environment\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    Dimensions.addEventListener(\"change\", onChange);\r\n    return () => {\r\n      Dimensions.removeEventListener(\"change\", onChange);\r\n    };\r\n  });\r\n\r\n  const handleBarCodeScanned = async (data) => {\r\n    const keywords = [\":BM.KEY:\", \":BM.VAX:\"];\r\n    const keyRef = [\":BM.KEY:\"];\r\n    if (data !== null) {\r\n      // Find keywords that match our array of items\r\n      if (keywords.some((keyword) => data.includes(keyword))) {\r\n        // Gets date from pass and checks to see if it's a number\r\n        if (keyRef.some((keyword) => data.includes(keyword))) {\r\n          let indexStartKey = data.indexOf(\":\", 130);\r\n          let indexEndKey = data.indexOf(\"/\");\r\n          let keywordBMKey = data.substring(indexStartKey, indexEndKey);\r\n          let keywordBMKeyFinal = keywordBMKey.slice(1);\r\n\r\n          if (!isNaN(keywordBMKeyFinal)) {\r\n            let year = parseInt(keywordBMKeyFinal.substr(0, 4), 10);\r\n            let day = parseInt(keywordBMKeyFinal.substr(6), 10);\r\n            let month = parseInt(keywordBMKeyFinal.substr(4, 2), 10);\r\n\r\n            let date = new Date(year, month - 1, day);\r\n            let todayDate = new Date();\r\n\r\n            if (date.getTime() < todayDate.getTime()) {\r\n              // If the date is in the past, show a toast\r\n              toast.show(\r\n                <View>\r\n                  <TouchableOpacity\r\n                    onPress={() => {\r\n                      Linking.openURL(\"https://www.gov.bm/safekey\");\r\n                      toast.hide(1);\r\n                    }}\r\n                  >\r\n                    <Text style={[styles.bold, { color: \"#fff\" }]}>\r\n                      This SafeKey has expired\r\n                    </Text>\r\n                    <Text\r\n                      style={[\r\n                        styles.text,\r\n                        { color: \"#fff\", textAlign: \"center\" },\r\n                      ]}\r\n                    >\r\n                      Click here to renew it\r\n                    </Text>\r\n                  </TouchableOpacity>\r\n                </View>,\r\n                {\r\n                  offsetBottom: 50,\r\n                  id: 1,\r\n                  position: \"bottom\",\r\n                  duration: 0,\r\n                  type: \"normal\",\r\n                  normalColor: \"#ff4d4d\",\r\n                }\r\n              );\r\n              return navigation.goBack();\r\n            }\r\n\r\n            let options = {\r\n              weekday: \"long\",\r\n              year: \"numeric\",\r\n              month: \"long\",\r\n              day: \"numeric\",\r\n            };\r\n            const dateQR = date.toLocaleString(\"en-US\", options);\r\n            await AsyncStorage.setItem(\"passExpiry\", dateQR);\r\n          } else {\r\n            console.log(\"parsed date is not a number\");\r\n          }\r\n        }\r\n        // take payload name and set as Key with the value being the parsed QR data. Every payload name is found\r\n        // between two colons in the parsed QR data\r\n        let indexStart = data.indexOf(\":\");\r\n        indexStart += 1;\r\n        let indexEnd = data.indexOf(\":\", indexStart + 1);\r\n        let keywordKey = data.substring(indexStart, indexEnd);\r\n        await AsyncStorage.setItem(keywordKey, data);\r\n        setScanned(true);\r\n        Analytics.logEvent(\"DocumentScanned\", {\r\n          type: keywordKey === \"BM.KEY\" ? \"SafeKey\" : \"Vaccination Certificate\",\r\n          purpose: \"User has scanned their SafeKey QR code.\",\r\n        });\r\n        // Navigate to a different screen while passing the parsed QR data with it\r\n        navigation.dispatch(\r\n          CommonActions.reset({ index: 0, routes: [{ name: \"QR List\" }] })\r\n        );\r\n        toast.show(\r\n          keywordKey === \"BM.KEY\" ? (\r\n            <View>\r\n              <Text style={[styles.bold, { color: \"#fff\" }]}>\r\n                SafeKey Added\r\n              </Text>\r\n            </View>\r\n          ) : (\r\n            <View>\r\n              <Text style={[styles.bold, { color: \"#fff\" }]}>\r\n                Vaccination Certificate Added\r\n              </Text>\r\n            </View>\r\n          ),\r\n          {\r\n            id: 3,\r\n            type: \"success\",\r\n            duration: 3500,\r\n          }\r\n        );\r\n      } else {\r\n        setInvalidQR(true);\r\n      }\r\n    } else {\r\n      setScanned(false);\r\n      setInvalidQR(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View\r\n      style={[\r\n        styles.container,\r\n        {\r\n          backgroundColor: \"#000\",\r\n          marginBottom: 0,\r\n        },\r\n      ]}\r\n    >\r\n      <View\r\n        style={[\r\n          styles.center,\r\n          {\r\n            backgroundColor: \"#000\",\r\n            fontSize: 16,\r\n            lineHeight: 50,\r\n            textAlign: \"center\",\r\n            position: \"relative\",\r\n            textAlignVertical: \"center\",\r\n            margin: 0,\r\n            zIndex: 10,\r\n            fontSize: 16,\r\n            flex: 1,\r\n            minHeight: 80,\r\n          },\r\n        ]}\r\n      >\r\n        <Text style={{ color: \"#f1f1f1\", marginBottom: 5, marginTop: 15 }}>\r\n          Scan your SafeKey Document QR code\r\n        </Text>\r\n        <Text style={{ color: \"#f1f1f1\" }}>Keep camera steady</Text>\r\n        <Text\r\n          style={{\r\n            color: invalidQR ? \"#ffbb33\" : \"#28a745\",\r\n            marginTop: 10,\r\n            fontFamily: \"OpenSans_600SemiBold\",\r\n          }}\r\n        >\r\n          {invalidQR ? \"INVALID QR\" : \"SCANNING\"}\r\n        </Text>\r\n      </View>\r\n\r\n      <QrReader\r\n        facingMode={facing}\r\n        onLoad={() => {\r\n          console.log(\"QR Reader Loaded\");\r\n        }}\r\n        delay={300}\r\n        onError={(error) => {\r\n          console.log(error.name);\r\n          if (error.name === \"NotAllowedError\") {\r\n            navigation.dispatch(\r\n              CommonActions.reset({ index: 0, routes: [{ name: \"NoCamera\" }] })\r\n            );\r\n          }\r\n        }}\r\n        onScan={(data) => {\r\n          scanned ? undefined : handleBarCodeScanned(data);\r\n        }}\r\n        style={{\r\n          width: dimensions.window.width < 565 ? \"100%\" : 510,\r\n          alignSelf: \"center\",\r\n        }}\r\n      />\r\n      <View\r\n        style={{\r\n          width: \"100%\",\r\n          flex: 1,\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <TouchableOpacity\r\n          onPress={changeFacing}\r\n          style={{\r\n            paddingHorizontal: 10,\r\n            alignSelf: \"center\",\r\n            backgroundColor: \"#1971ef\",\r\n            paddingVertical: 10,\r\n            borderRadius: 5,\r\n            marginBottom: 25,\r\n            marginTop: 25,\r\n          }}\r\n        >\r\n          <Text\r\n            style={{\r\n              color: \"white\",\r\n              textAlign: \"center\",\r\n              letterSpacing: 1,\r\n              fontFamily: \"OpenSans_400Regular\",\r\n            }}\r\n          >\r\n            Switch Camera\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default QrScanScreen;\r\n"],"sourceRoot":""}